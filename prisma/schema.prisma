generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  SELLER
}

enum Gender {
  MALE
  FEMALE
  UNISEX
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum AddressType {
  HOME
  WORK
  OTHER
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

model EComerceUser {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String     @unique
  gender            Gender?
  password          String
  wallet            Float      @default(500) @db.Double
  picture           String?
  role              Role       @default(CUSTOMER)
  favoritesProducts String[]   @db.ObjectId
  wishList          String[]   @db.ObjectId
  cart              Cart[]
  orders            Orders[]
  address           Address[]
  products          Products[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  reviews           Review[]
}

model Address {
  id     String       @id @default(auto()) @map("_id") @db.ObjectId
  userId String       @db.ObjectId
  user   EComerceUser @relation(fields: [userId], references: [id])

  street          String
  city            String
  state           String
  postalCode      String
  country         String
  phoneNumber     String
  houseNumber     String
  addressType     AddressType
  apartmentNumber String?
  additionalInfo  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Orders[]

  @@index([userId])
}

model Cart {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  productQuantity Int      @default(1)
  sizeName        String
  sizeId          String   @db.ObjectId
  colorName       String
  colorId         String   @db.ObjectId
  productId       String   @db.ObjectId
  productImage    String
  productPrice    Float    @db.Double
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  product Products     @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    EComerceUser @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Orders {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  userId            String        @db.ObjectId
  paymentStatus     PaymentStatus @default(PENDING)
  orderStatus       OrderStatus   @default(PENDING)
  orderDate         DateTime      @default(now())

  totalAmount       Float         @db.Double
  
  shippingAddressId String?       @db.ObjectId
  orderItems        OrderItem[]

  orderProducts     OrderProducts[] // Relação de 1 para N com OrderProducts

  trackingNumber String?
  paymentMethod  String?
  transactionId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shippingAddress Address?     @relation(fields: [shippingAddressId], references: [id])
  user            EComerceUser @relation(fields: [userId], references: [id])


  @@index([userId])
}

model OrderProducts {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  sizeName        String
  colorName       String
  sizeId          String   @db.ObjectId
  colorId         String   @db.ObjectId
  productImage    String
  productTitle    String
  productCategory String?
  productQuantity Int?

  // Relacionamento com Orders
  orderId String  @db.ObjectId
  order   Orders  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([orderId])
}


model Products {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  images      String[]
  mainImage   String?
  category    String?
  gender      Gender?
  reviews     Review[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  price       Float    @db.Double

  // Relacionamentos
  variants       ProductVariant[]
  EComerceUser   EComerceUser?    @relation(fields: [eComerceUserId], references: [id])
  eComerceUserId String?          @db.ObjectId
  Cart           Cart[]
}

model Color {
  id       String           @id @default(auto()) @map("_id") @db.ObjectId
  name     String           @unique
  // Relacionamentos
  variants ProductVariant[]
}

model Size {
  id       String           @id @default(auto()) @map("_id") @db.ObjectId
  name     String           @unique
  // Relacionamentos
  variants ProductVariant[]
}

//ao fazer checkout passar o ID da variente ou ao add o produto ao carrinho! importtante rever!!!
model ProductVariant {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  OrderItem OrderItem[]
  stock     Int

  productId String @db.ObjectId
  colorId   String @db.ObjectId
  sizeId    String @db.ObjectId

  product Products @relation(fields: [productId], references: [id] ,onDelete: Cascade)
  color   Color    @relation(fields: [colorId], references: [id] ,onDelete: Cascade)
  size    Size     @relation(fields: [sizeId], references: [id],onDelete: Cascade)

  // Indexes
  @@index([productId, colorId, sizeId], name: "product_variant_index")
}

model OrderItem {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String         @db.ObjectId
  order     Orders         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variantId String         @db.ObjectId
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  quantity  Int
  price     Float          @db.Double
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Review {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  productId String       @db.ObjectId
  userId    String       @db.ObjectId
  rating    Int
  comment   String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  product   Products     @relation(fields: [productId], references: [id])
  user      EComerceUser @relation(fields: [userId], references: [id])
}
